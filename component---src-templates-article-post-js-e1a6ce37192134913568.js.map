{"version":3,"sources":["webpack:///./src/components/CopyButton.js","webpack:///./src/components/AdjacentPosts.js","webpack:///./src/templates/ArticlePost.js","webpack:///./src/components/MetaText.js","webpack:///./src/components/SmartLink.js","webpack:///./src/utils/Date.js"],"names":["CopyButton","props","_this","_React$Component","call","this","handleClick","e","btn","currentTarget","codeBlock","parentNode","nextSibling","nodeType","firstChild","ta","document","createElement","style","height","appendChild","value","innerText","select","execCommand","removeChild","bind","assertThisInitialized_default","render","CopyButtonWrapper","Styled","GenericButton","withConfig","displayName","componentId","DarkTheme","primary","text","color","react_default","a","type","icon","func","React","Component","AdjacentPosts","prevIndex","nextIndex","_this$props","currentPost","allPosts","i","length","node","fields","slug","AdjacentPostsWrapper","div","SeperatedWrapper","PrevTitle","span","NextTitle","to","intRel","isIconLeft","frontmatter","title","defaultProps","prev","next","propTypes","PropTypes","string","RenderAst","RehypeReact","components","copy-button","Compiler","ArticlePost","edges","data","allMarkdownRemark","markdownRemark","htmlAst","timeToRead","tableOfContents","excerpt","targetTag","created","updated","banner","topic","tags","project","misc","toc","github","reddit","medium","comments","seoImg","exec","childImageSharp","fluid","srcSet","Article","FontSerif","Banner","ShadowWrapper","theme","PostHeader","TableOfContents","PostBody","PostFooter","PostFooterTagline","PostButtonsWrapper","BaseLayout","SEO","pathname","location","description","image","article","gatsby_image_default","alt","dist","flexDirection","width","ResMinWidthEm","s","mx","px","py","className","MetaText","texts","isInline","FancyDateMDY","Date","parse","links","Array","fill","linkStates","map","tag","dangerouslySetInnerHTML","__html","components_AdjacentPosts","pageQuery","iconType","caption","MetaLink","SmartLink","contents","divider","react__WEBPACK_IMPORTED_MODULE_1___default","key","linkState","_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_5__","fixedWidth","src","gatsby_image__WEBPACK_IMPORTED_MODULE_2___default","oneOf","isRequired","array","bool","extRel","SmartLinkWrapper","LinkStyle","accent","gatsby__WEBPACK_IMPORTED_MODULE_3__","getProps","_ref","isPartiallyCurrent","state","rel","gatsby_plugin_google_analytics__WEBPACK_IMPORTED_MODULE_4__","href","target","object","__webpack_require__","d","__webpack_exports__","months","TZDate","date","dateObj","getTime","getTimezoneOffset","DayOrdinal","n","fancyDate","getMonth","getDate","getFullYear"],"mappings":"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","file":"component---src-templates-article-post-js-e1a6ce37192134913568.js","sourcesContent":["import React from 'react'\nimport Styled from 'styled-components'\n\nimport GenericButton from './GenericButton'\nimport { DarkTheme } from '../utils/Theme'\n\n\nclass CopyButton extends React.Component {\n  constructor(props) {\n    super(props)\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n  // Warning, here be DOM dragons\n  handleClick = () => (e) => {\n    // Initialize codeBlock to the next sibling of its parent in the markdown flow\n    const btn = e.currentTarget\n    let codeBlock = btn.parentNode.parentNode.nextSibling\n\n    // Loop through nodes until the <code> node with the target text is found\n    // 8:COMMENT_NODE, 3:TEXT_NODE, need to ignore these\n    while(codeBlock.nodeType === 8 || codeBlock.nodeType === 3) {\n      codeBlock = codeBlock.nextSibling\n    }\n    codeBlock = codeBlock.firstChild\n    while(codeBlock.nodeType === 8 || codeBlock.nodeType === 3) {\n      codeBlock = codeBlock.nextSibling\n    }\n    codeBlock = codeBlock.firstChild\n    while(codeBlock.nodeType === 8 || codeBlock.nodeType === 3) {\n      codeBlock = codeBlock.nextSibling\n    }\n\n    // Use an ephemeral <textarea> element to get the code into the clipboard\n    let ta = document.createElement('textarea')\n    ta.style.height = 0\n    btn.appendChild(ta)\n    ta.value = codeBlock.innerText\n    ta.select()\n    document.execCommand('copy')\n    btn.removeChild(ta)\n  }\n\n  render() {\n    const CopyButtonWrapper = Styled(GenericButton)`\n      && {\n        button {\n          position: absolute;\n          right: 0;\n          margin: 0.5em 0.5em 0 0;\n          padding: 0.375em 0.5em;\n          opacity: 0.25;\n          font-size: 1em;\n          font-weight: bold;\n          color: ${DarkTheme.primary};\n          background-color: ${DarkTheme.text};\n          :hover {\n            opacity: 1;\n            background-color: ${DarkTheme.text};\n            span > span {\n              color: ${DarkTheme.primary};\n            }\n          }\n          svg {\n            font-size: 0.675em;\n            color: ${DarkTheme.color};\n          }\n        }\n      }\n    `\n\n    return (\n      <CopyButtonWrapper\n        type='action'\n        text='Copy'\n        icon={['fas', 'clone']}\n        func={this.handleClick()}\n      />\n    )\n  }\n}\n\nexport default CopyButton\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Styled from 'styled-components'\n\nimport GenericButton from './GenericButton'\n\nclass AdjacentPosts extends React.Component {\n  render() {\n    const { currentPost, allPosts } = this.props\n    let prevIndex\n    let nextIndex\n    for(let i = 0; i < allPosts.length; i++) {\n      if(allPosts[i].node.fields.slug === currentPost.fields.slug) {\n        prevIndex = (i === 0) ? -1 : i-1\n        nextIndex = (i === allPosts.length-1) ? -1 : i+1\n        break\n      }\n    }\n\n    const AdjacentPostsWrapper = Styled.div`\n      display: flex;\n      flex-direction: column;\n      margin-top: 1em;\n    `\n    const SeperatedWrapper = Styled.div`\n      display: flex;\n      justify-content: space-between;\n    `\n    const PrevTitle = Styled.span`\n      display: block;\n      margin: 0.5em 1em 0 0;\n      max-width: 15em;\n      font-style: italic;\n    `\n    const NextTitle = Styled.span`\n      display: block;\n      margin: 0.5em 0 0 1em;\n      max-width: 15em;\n      font-style: italic;\n      text-align: right;\n    `\n\n    return (\n      <AdjacentPostsWrapper>\n        <SeperatedWrapper>\n          {prevIndex !== -1 ?\n            <GenericButton\n              type='internal'\n              to={allPosts[prevIndex].node.fields.slug}\n              text='prev'\n              icon={['fas', 'angle-left']}\n              intRel='prev'\n            /> :\n            <span></span>\n          }\n          {nextIndex !== -1 ?\n            <GenericButton\n              type='internal'\n              to={allPosts[nextIndex].node.fields.slug}\n              text='next'\n              icon={['fas', 'angle-right']}\n              isIconLeft={false}\n              intRel='next'\n            /> :\n            <span></span>\n          }\n        </SeperatedWrapper>\n        <SeperatedWrapper>\n          {prevIndex !== -1 ?\n            <PrevTitle>{allPosts[prevIndex].node.frontmatter.title}</PrevTitle> :\n            <PrevTitle>This is where it all begins</PrevTitle>\n          }\n          {nextIndex !== -1 ?\n            <NextTitle>{allPosts[nextIndex].node.frontmatter.title}</NextTitle> :\n            <PrevTitle>This is the end (for now)</PrevTitle>\n          }\n        </SeperatedWrapper>\n      </AdjacentPostsWrapper>\n    )\n  }\n}\n\nAdjacentPosts.defaultProps = {\n  prev: '/',\n  next: '/'\n}\n\nAdjacentPosts.propTypes = {\n  prev: PropTypes.string,\n  next: PropTypes.string\n}\n\nexport default AdjacentPosts\n","import React from 'react'\nimport { graphql } from 'gatsby'\nimport Img from 'gatsby-image'\nimport Styled from 'styled-components'\nimport { Flex } from '@rebass/grid'\nimport RehypeReact from 'rehype-react'\n\nimport BaseLayout from '../components/BaseLayout'\nimport SEO from '../components/SEO'\nimport MetaText from '../components/MetaText'\nimport GenericButton from '../components/GenericButton'\nimport CopyButton from '../components/CopyButton'\nimport AdjacentPosts from '../components/AdjacentPosts'\nimport { FancyDateMDY } from '../utils/Date'\nimport { FontSerif } from '../utils/Text'\nimport { ResMinWidthEm } from '../utils/Responsive'\n\nconst RenderAst = new RehypeReact({\n  createElement: React.createElement,\n  components: { 'copy-button': CopyButton },\n}).Compiler\n\nclass ArticlePost extends React.Component {\n  render() {\n    const { edges } = this.props.data.allMarkdownRemark\n    const { markdownRemark } = this.props.data\n    const { htmlAst, timeToRead, tableOfContents, excerpt, fields, frontmatter, } = markdownRemark\n    const { targetTag } = fields\n    const { created, updated, banner, title, topic, icon, tags, project, misc, toc, github, reddit, medium } = frontmatter\n    const comments = (github || reddit || medium)\n    const srcSetRegex = /,\\n(.*) .*$/g\n    let seoImg = null\n\n    if(banner) {\n      seoImg = srcSetRegex.exec(banner.childImageSharp.fluid.srcSet)\n      seoImg = seoImg[1]\n    } \n\n    const Article = Styled.div`\n      position: relative;\n      display: flex;\n      flex-direction: column;\n      width: 100%;\n      .title {\n        font-family: ${FontSerif};\n      }\n    `\n    const Banner = Styled.div`\n      flex: 0 0 24em;\n      div {\n        position: fixed;\n        width: 100%;\n        height: 100%;\n        margin-top: -6em;\n      }\n    `\n    const ShadowWrapper = Styled.div`\n      position: relative;\n      flex: 1;\n      box-shadow: 0em 0em 1.5em -0.25em black;\n      background-color: ${props => props.theme.primary};\n    `\n    const PostHeader = Styled.div`\n      margin-bottom: 3em;\n      h1 {\n        margin-top: 0;\n        margin-bottom: 0.25em;\n        font-size: 4em;\n        font-weight: normal;\n      }\n    `\n    const TableOfContents = Styled.div`\n      display: flex;\n      flex-direction: column;\n      margin-bottom: 3em;\n      > p {\n        margin: 0;\n        font-size: 2em;\n        font-weight: bold;\n      }\n      > div {\n        > ul {\n          padding-left: 2em;\n        }\n        ul {\n          margin: 0;\n          list-style-type: upper-roman;\n        }\n      }\n    `\n    const PostBody = Styled.div`\n      position: relative;\n    `\n    const PostFooter = Styled.div`\n      margin-top: 3em;\n      h1 {\n        margin-top: 0;\n        margin-bottom: 0.25em;\n      }\n    `\n    const PostFooterTagline = Styled.span`\n      font-size: 1.5em;\n      font-style: italic;\n    `\n    const PostButtonsWrapper = Styled.div`\n      display: flex;\n      justify-content: space-evenly;\n      margin-top: 0.5em;\n    `\n\n    return (\n      <BaseLayout>\n        <SEO\n          pathname={this.props.location.pathname}\n          title={title}\n          description={excerpt}\n          image={seoImg}\n          article={true}\n        />\n        <Article>\n          <Banner>\n            <div>\n              <Img fluid={banner.childImageSharp.fluid} alt=\"Banner\"/>\n            </div>\n          </Banner>\n          <ShadowWrapper>\n            <Flex flexDirection=\"column\" width={[1, 1, 1, 1, ResMinWidthEm.s]} mx=\"auto\" px={[4, 5, 6, 6, 0]} py={5}>\n              <PostHeader>\n                <h1 className='title'>{title}</h1>\n                <MetaText\n                  type='text'\n                  icon={['fas', icon]}\n                  texts={[topic]}\n                  isInline={true}\n                />\n                <MetaText\n                  type='text'\n                  icon={['far', 'calendar-alt']}\n                  texts={[FancyDateMDY(Date.parse(created))]}\n                  isInline={true}\n                />\n                <MetaText\n                  type='text'\n                  icon={['far', 'clock']}\n                  texts={[`${timeToRead} min read`]}\n                  isInline={true}\n                />\n                <MetaText\n                  type='internal'\n                  icon={['fas', 'tags']}\n                  texts={tags}\n                  links={Array(tags.length).fill('/search')}\n                  linkStates={tags.map(tag => ({tag: tag}))}\n                />\n                {project &&\n                  <MetaText\n                    type='internal'\n                    icon={['fas', 'asterisk']}\n                    texts={[`Related Project: ${project}`]}\n                    links={[`/projects/${targetTag}`]}\n                  />\n                }\n                {misc &&\n                  <MetaText\n                    type='internal'\n                    icon={['fas', 'asterisk']}\n                    texts={[`Related Misc: ${misc}`]}\n                    links={[`/misc/${targetTag}`]}\n                  />\n                }\n                {updated !== created &&\n                  <MetaText\n                    type='text'\n                    icon={['fas', 'pencil-alt']}\n                    texts={[`Last updated on ${FancyDateMDY(Date.parse(updated))}`]}\n                  />\n                }\n              </PostHeader>\n              {toc && \n                <TableOfContents>\n                  <p>Table of Contents</p>\n                  <div dangerouslySetInnerHTML={{__html: tableOfContents}}/>\n                </TableOfContents>\n              }\n              <PostBody>{RenderAst(htmlAst)}</PostBody>\n              <hr/>\n              <AdjacentPosts \n                currentPost={markdownRemark}\n                allPosts={edges}\n              />\n              <PostFooter>\n                {comments &&\n                  <div>\n                    <h1>Discussion</h1>\n                    <PostFooterTagline>Questions? Comments? Join the discussion over on the...</PostFooterTagline>\n                    <PostButtonsWrapper>\n                      {github &&\n                        <GenericButton\n                          type='external'\n                          to={github}\n                          text='Issue'\n                          icon={['fab', 'github']}\n                        />\n                      }\n                      {reddit &&\n                        <GenericButton\n                          type='external'\n                          to={reddit}\n                          text='Post'\n                          icon={['fab', 'reddit-alien']}\n                        />\n                      }\n                      {medium &&\n                        <GenericButton\n                          type='external'\n                          to={medium}\n                          text='Article'\n                          icon={['fab', 'medium-m']}\n                        />\n                      }\n                    </PostButtonsWrapper>\n                  </div>\n                }\n              </PostFooter>\n            </Flex>\n          </ShadowWrapper>\n        </Article>\n      </BaseLayout>\n    )\n  }\n}\n\nexport default ArticlePost\n\nexport const pageQuery = graphql`\n  query($slug: String!) {\n    allMarkdownRemark(\n      filter: {fields: {type: {eq: \"article\"} kind: {eq: \"page\"}} frontmatter: {draft: {ne: true}}}\n      sort: {order: ASC, fields: [frontmatter___created]}\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n          }\n        }\n      }\n    }\n    markdownRemark(fields: {slug: {eq: $slug}}) {\n      htmlAst\n      timeToRead\n      tableOfContents(pathToSlugField: \"fields.slug\")\n      excerpt(pruneLength: 140)\n      fields {\n        slug\n        targetTag\n        number\n      }\n      frontmatter {\n        created\n        updated\n        banner {\n          childImageSharp {\n            fluid(maxWidth: 2400, maxHeight: 1200, cropFocus: CENTER) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n        title\n        topic\n        icon\n        tags\n        project\n        toc\n        github\n        reddit\n        medium\n      }\n    }\n  }\n`\n","import React from 'react'\nimport Img from 'gatsby-image'\nimport PropTypes from 'prop-types'\nimport Styled from 'styled-components'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nimport SmartLink from './SmartLink'\n\n\nclass MetaText extends React.Component {\n  render() {\n    const { className, type, icon, texts, links, linkStates, iconType, isInline } = this.props\n\n    const MetaText = Styled.div`\n      display: ${isInline ? 'inline-flex' : 'flex'};\n      padding: 0.25em ${isInline ? '1em' : '0'} 0.25em 0;\n      font-size: 0.875em;\n      color: ${props => props.theme.caption};\n      svg, img {\n        padding-right: 0.375em;\n      }\n    `\n    const MetaLink = Styled(SmartLink)`\n      && {\n        a {\n          transition: all 0.3s;\n          color: ${props => props.theme.caption};\n          :hover {\n            color: ${props => props.theme.text};\n          }\n          ::before {\n            background-color: ${props => props.theme.text};\n          }\n        }\n      }\n    `\n\n    const contents = texts.map((text, i) => {\n      let divider = ''\n      if(i < texts.length-1) {\n        divider = <span>, </span>\n      }\n      if(type === 'text') {\n        return (\n          <span key={i}>\n            {text}{divider}\n          </span>\n        )\n      }\n      else {\n        return (\n          <span key={i}>\n            <MetaLink className={className} type={type} to={links[i]} text={text} linkState={linkStates[i]}/>{divider}\n          </span>\n        )\n      }\n    })\n\n    return (\n      <MetaText className={className}>\n        <div>\n          {iconType === 'fa' &&\n            <FontAwesomeIcon icon={icon} fixedWidth/>\n          }\n          {iconType === 'svg' &&\n            <object data={icon[0]} type=\"image/svg+xml\">\n              <img src=\"../images/favicon.png\" alt=\"favicon\"/>\n            </object>\n          }\n          {iconType === 'img' &&\n            <img src={icon[0]} alt=\"\"/>\n          }\n          {iconType === 'gimg' &&\n            <Img fluid={icon[0]} alt=\"\"/>\n          }\n        </div>\n        <div>\n          {contents}\n        </div>\n      </MetaText>\n    )\n  }\n}\n\nMetaText.defaultProps = {\n  icon: [],\n  links: [],\n  linkStates: [],\n  iconType: 'fa',\n  isInline: false\n}\n\nMetaText.propTypes = {\n  type: PropTypes.oneOf([\n    'text',\n    'internal',\n    'external'\n  ]).isRequired,\n  texts: PropTypes.array.isRequired,\n  icon: PropTypes.array,\n  links: PropTypes.array,\n  linkStates: PropTypes.array,\n  iconType: PropTypes.oneOf([\n    'none',\n    'fa',\n    'svg',\n    'img',\n    'gimg'\n  ]),\n  isInline: PropTypes.bool\n}\n\nexport default MetaText","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'gatsby'\nimport { OutboundLink } from 'gatsby-plugin-google-analytics'\nimport Styled from 'styled-components'\n\nimport { LinkStyle } from '../utils/Text'\n\n\nclass SmartLink extends React.Component {\n  render() {\n    const { className, type, to, text, title, linkState, intRel, extRel } = this.props\n\n    const SmartLinkWrapper = Styled.span`\n      ${LinkStyle}\n      a {\n        transition: all 0.3s;\n        color: ${props => props.theme.color};\n        :hover {\n          color: ${props => props.theme.accent};\n        }\n        ::before {\n          background-color: ${props => props.theme.accent};\n        }\n      }\n    `\n    \n    return (\n      <SmartLinkWrapper className={className}>\n        {type === 'internal' &&\n          <Link to={to} title={title} getProps={({isPartiallyCurrent}) => {return isPartiallyCurrent ? {className: \"active\"} : null}} state={linkState} rel={intRel}>\n            {text}\n          </Link>\n        }\n        {type === 'external' &&\n          <OutboundLink href={to} title={title} target=\"_blank\" rel={extRel}>\n            {text}\n          </OutboundLink>\n        }\n      </SmartLinkWrapper>\n    )\n  }\n}\n\nSmartLink.defaultProps = {\n  title: '',\n  linkState: {},\n  intRel: '',\n  extRel: 'external nofollow noopener noreferrer'\n}\n\nSmartLink.propTypes = {\n  type: PropTypes.oneOf([\n    'internal',\n    'external'\n  ]).isRequired,\n  to: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n  title: PropTypes.string,\n  linkState: PropTypes.object,\n  intRel: PropTypes.string,\n  extRel: PropTypes.string\n}\n\nexport default SmartLink\n","const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n\nfunction TZDate(date) {\n  const dateObj = new Date(date)\n  const offset = -60000;\n  return new Date(dateObj.getTime() - dateObj.getTimezoneOffset() * offset)\n}\n\nfunction DayOrdinal(n) {\n  return n + (n > 0 ? ['th', 'st', 'nd', 'rd'][(n > 3 && n < 21) || n % 10 > 3 ? 0 : n % 10] : '');\n}\n\nexport function FancyDateMDY(date) {\n  const fancyDate = TZDate(date)\n  return `${months[fancyDate.getMonth()]} ${DayOrdinal(fancyDate.getDate())}, ${fancyDate.getFullYear()}`\n}\n\nexport function FancyDateMD(date) {\n  const fancyDate = TZDate(date)\n  return `${months[fancyDate.getMonth()]} ${DayOrdinal(fancyDate.getDate())}`\n}"],"sourceRoot":""}